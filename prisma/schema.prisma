generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Main {
  ENGINEERING
  DESIGN
  PRODUCT
  ALL
}

enum CourseStyle {
  COURSE
  WORKSHOP
  TRAINING
  LECTURE
}

enum Titles {
  ENGINEERING
  DESIGN
  PRODUCT
}

enum Roles {
  STUDENT
  AMBASSADOR
  RETHINKER
}

enum Levels {
  LOW
  MEDIUM
  HIGH
}

model Badges {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  product     String[]
  engineering String[]
  academy     String[]
  design      String[]
  welcome     String[]
  studies     String[]
  timeRecord  String[]
  troll       String[]
  goals       String[]

  @@map("badges")
}

model Bucket {
  id     String @id @default(uuid())
  title  String
  url    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String?
  surname  String?
  main     Main?    @default(ENGINEERING)
  watched  String[]
  role     Roles    @default(STUDENT)
  cratedAt DateTime @default(now())
  avatar   String
  bucket   Bucket?
  badges   Badges?
  tasks    Tasks[]

  @@map("user")
}

model Trail {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String
  weight         Int
  imageUrl       String
  course         Course[]
  courseTimeline CourseTimeline[]
  main           Main             @default(ENGINEERING)
  cratedAt       DateTime         @default(now())

  @@map("trail")
}

model Course {
  id                 String      @id @default(uuid())
  name               String
  description        String
  level              Levels
  workload           Int
  learning           String
  skills             String
  courseStyle        CourseStyle @default(COURSE)
  imageTeacher       String
  teacherDescription String
  teacherName        String
  trailId            String
  trail              Trail       @relation(fields: [trailId], references: [id])
  cratedAt           DateTime    @default(now())
  modules            Module[]

  @@map("course")
}

model Lesson {
  id          String   @id @default(uuid())
  name        String
  embedUrl    String
  description String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  cratedAt    DateTime @default(now())

  @@map("lesson")
}

model Module {
  id       String   @id @default(uuid())
  name     String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  lessons  Lesson[]
  cratedAt DateTime @default(now())

  @@map("module")
}

model CourseTimeline {
  id       String   @id @default(uuid())
  stage    String
  start    DateTime
  finish   DateTime
  content  String
  trail    Trail    @relation(fields: [trailId], references: [id])
  trailId  String
  cratedAt DateTime @default(now())

  @@map("timeline")
}

model Tasks {
  id          String   @id @default(uuid())
  name        String
  taskDate    DateTime
  startTime   String
  endTime     String
  tags        String   @default("tags")
  status      String   @default("status")
  description String   @default("description")
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("tasks")
}
